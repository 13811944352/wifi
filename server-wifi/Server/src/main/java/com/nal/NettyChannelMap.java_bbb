package com.nal;

import io.netty.channel.Channel;
import io.netty.channel.socket.SocketChannel;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;


public class NettyChannelMap {
	class NettyChannel {
		String						id;
		ArrayList<String>			uname;
		SocketChannel				SocketChannel;
		ArrayList<SocketChannel>	localChannel;
		NettyChannel() {
			uname = new ArrayList<String>();
			localChannel = new ArrayList<localChannel>();
		}
	}

    private static Map<String,NettyChannel> map=new ConcurrentHashMap<String,NettyChannel>();

    public static void add(String clientId,SocketChannel socketChannel){
		NettyChannel c = map.get(clientId);
		//boolean has = true;
		if(c == null) {
		//	has = false;
			c = new NettyChannel();
		}
		c.SocketChannel = socketChannel;
		//if(has == false)
		map.put(clientId,c);
		//else
		//	map.
	
    }

	public static void add(String clientId,SocketChannel socketChannel,String uname) {
		NettyChannel c = map.get(clientId);
		//boolean has = true;
		if(c == null) {
		//	has = false;
			c = new NettyChannel();
		}
		c.localChannel= socketChannel;
		for(String p:c.name){
			
		}
		//if(for(Person p:data){)
		//c.uname = uname;
		//if(has == false)
		map.put(clientId,c);
		//else
		//	map.

	}

    public static NettyChannel get(String clientId){
       return map.get(clientId);
    }

/*
    public static void remove(SocketChannel socketChannel){
        for (Map.Entry entry:map.entrySet()){
            if (entry.getValue()==socketChannel){
                map.remove(entry.getKey());
            }
        }
    }
*/
}
